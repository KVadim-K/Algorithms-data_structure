# 1.Создаем переменную для хранения максимального элемента массива.
# 2.Перебираем весь массив, чтобы работать с каждым элементом по отдельности.
# 3.На каждом шаге сравниваем текущий элемент с переменной максимального значения. Сохраняем самый первый элемент
# массива в эту переменную, после чего сравниваем это значение с каждым элементом массива.
# 4.Если текущий элемент больше максимального значения, заменяем максимальное значение.
# 5.Возвращаем максимальное значение после окончания цикла.
# 6.В конце цикла получаем максимальное значение массива.

def find_max(list):
    max = list[0]  # создаём переменную для хранения максимального числа в массиве
    for i in list:
        if i > max:
            max = i
    return max

numbers = [56, 74, 23, 98, 143, -89, -23]

print(find_max(numbers))


# 1.Создаем переменную для хранения минимального элемента массива.
# 2.Перебираем весь массив, чтобы работать с каждым элементом по отдельности.
# 3.На каждом шаге сравниваем текущий элемент с переменной минимального значения. Сохраняем самый первый элемент
# массива в эту переменную, после чего сравниваем это значение с каждым элементом массива.
# 4.Если текущий элемент меньше минимального значения, заменяем минимальное значение.
# 5.Возвращаем минимальное значение после окончания цикла.
# 6.В конце цикла получаем минимальное значение массива.

def find_min(list):
    min = list[0]  # создаём переменную для хранения максимального числа в массиве
    for i in list:
        if i < min:
            min = i
    return min

numbers = [56, 74, 23, 98, 143, -89, -23]

print(find_min(numbers))


#5! = 1 * 2 * 3 * 4 * 5 = 120
# 1.Сравнение числа с нулем: если число равно 0, то факториал нуля будет равен 1.
# 2.Создание переменной для хранения итогового результата.
# 3.Использование цикла for и range для перебирания списка из чисел до нашего числа включительно,
# у которого мы ищем факториал.
# 4.Домножение результирующей переменной на текущее число в цикле.
# 5.Возврат факториала числа после цикла.

def factorial(number):
    if number == 0:
        return 1
    result = 1
    for i in range(1, number + 1):
        result *= i
    return result

print(factorial(7))

#   Алгоритм для нахождения простого числа:
# 1.Проверяем, меньше или равно ли число 1 единице. Если да, то возвращаем false.
# 2.Создаем цикл, перебирающий все числа от 2 до квадратного корня из нашего числа включительно.
# (так как 2 — это первое простое число).
# 3.Проверяем, делится ли наше число на какое-то из чисел, которые перебирает цикл, без остатка.
# Если да, то возвращаем false.
# 4.Существует правило:если число делится на некоторое число, большее своего квадратного корня, то оно обязательно будет
# делиться и на число, меньшее своего квадратного корня. Мы используем это правило, чтобы сократить количество проверок.
# 5.Если число делится на любое из чисел в этом диапазоне, мы возвращаем false, так как оно не является простым.

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
    return True

print(is_prime(16))