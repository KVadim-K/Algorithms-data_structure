### Алгоритм

# 1. **Получение входной строки:** Начнем с получения строки, которую нужно проверить.
# 2. **Преобразование строки:** Преобразуем строку в нижний регистр, чтобы игнорировать регистр символов.
# 3. **Удаление нежелательных символов:** Удалим из строки все пробелы и, при необходимости, знаки пунктуации, чтобы анализировать только буквы и цифры.
# 4. **Определение палиндрома:**
#    - Сравним строку с её обратной версией.
#    - Если строка равна своей обратной версии, то это палиндром.
# 5. **Возврат результата:** Вернем `True`, если строка является палиндромом, и `False` в противном случае.

def is_palindrome(s):
    # Преобразование строки в нижний регистр
    s = s.lower()
    # Удаление всех символов, кроме букв и цифр
    cleaned_s = ''.join(char for char in s if char.isalnum())
    # Сравнение строки с её обратной версией
    return cleaned_s == cleaned_s[::-1]
#  **Удаление лишних символов**: Вместо использования регулярных выражений используется генераторное выражение
# `''.join(char for char in s if char.isalnum())`, которое создает новую строку, содержащую только буквы и цифры.
# Метод `char.isalnum()` возвращает `True`, если символ является буквой или цифрой.


# Пример использования функции
print(is_palindrome("А роза упала на лапу Азора"))  # True
print(is_palindrome("Привет, мир!"))                # False